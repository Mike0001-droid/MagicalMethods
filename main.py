# ХЭШИ МОЖНО ВЫЧИСЛЯТЬ ТОЛЬКО ДЛЯ НЕИЗМЕНЯЕМЫХ ОБЪЕКТОВ

a = 15 # Целочисленная переменная, неизменяемый тип данных
b = 'Hello, world!' # Строковая переменная, неизменяемый тип данных
c = 'Hello, world!' # Строковая переменная, неизменяемый тип данных

print(hash(a)) # -> хэш числа равен самому числу
print(hash(b)) # -1762094893339159099

# Если объекты равны, то равен и их хэш
print(b == c)
print(hash(b) == hash(c))

# Равные хэши не гаранитируют равенство объектов
# Если хэши не равны, то и объекты точно не равны
# Ключи в словарях должны относится к неизменяемым объектам
# Словарь хранит ключи в таком виде:
# (хэш ключа, ключ)

d = {}
d[5] = 'пять'
d['Пять'] = 5
print(d) # {5: 'пять', 'Пять': 5}
#d[['Пять', 5]] = [5, 'Пять'] # TypeError: unhashable type: 'list', потому что
                             # списки относятся к изменяемым типам данных

# Первоначально запись в словаре ищется по хэшу, а затем, если оказалось, что
# хэши одинаковые, то выбирается по указанному в коллекции ключу

class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def __eq__(self, other):
        return self.x == other.x and self.y == other.y
    
    def __hash__(self):
        return hash((self.x, self.y))

p1 = Point(1,2)
p2 = Point(1,2)
print(hash(p1), hash(p2), sep="\n")
print(p1 == p2)